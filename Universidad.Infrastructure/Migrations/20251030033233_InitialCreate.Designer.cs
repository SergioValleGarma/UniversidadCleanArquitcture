// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Universidad.Infrastructure.Data;

#nullable disable

namespace Universidad.Infrastructure.Migrations
{
    [DbContext(typeof(UniversidadDbContext))]
    [Migration("20251030033233_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.21")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Universidad.Domain.Entities.Carrera", b =>
                {
                    b.Property<int>("CarreraId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CarreraId"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<int>("DuracionSemestres")
                        .HasColumnType("int");

                    b.Property<int>("FacultadId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("TituloOtorgado")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CarreraId");

                    b.HasIndex("FacultadId", "Nombre")
                        .IsUnique();

                    b.ToTable("Carreras", (string)null);
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Curso", b =>
                {
                    b.Property<int>("CursoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("CursoId"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<int>("CarreraId")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("Creditos")
                        .HasColumnType("int");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<int>("NivelSemestre")
                        .HasColumnType("int");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("CursoId");

                    b.HasIndex("Codigo")
                        .IsUnique();

                    b.HasIndex("CarreraId", "Nombre")
                        .IsUnique();

                    b.ToTable("Cursos", (string)null);
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Facultad", b =>
                {
                    b.Property<int>("FacultadId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("FacultadId"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Decano")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Descripcion")
                        .HasMaxLength(500)
                        .HasColumnType("nvarchar(500)");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Nombre")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("Ubicacion")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("FacultadId");

                    b.HasIndex("Nombre")
                        .IsUnique();

                    b.ToTable("Facultades", (string)null);
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Prerrequisito", b =>
                {
                    b.Property<int>("PrerrequisitoId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("PrerrequisitoId"));

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<int>("CursoReqId")
                        .HasColumnType("int");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.HasKey("PrerrequisitoId");

                    b.HasIndex("CursoReqId");

                    b.HasIndex("CursoId", "CursoReqId")
                        .IsUnique();

                    b.ToTable("Prerrequisitos", null, t =>
                        {
                            t.HasCheckConstraint("CK_Prerrequisito_CursoDiferente", "[CursoId] != [CursoReqId]");
                        });
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Seccion", b =>
                {
                    b.Property<int>("SeccionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("SeccionId"));

                    b.Property<bool>("Activo")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true);

                    b.Property<string>("Aula")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("CapacidadMaxima")
                        .HasColumnType("int");

                    b.Property<string>("Codigo")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("CursoId")
                        .HasColumnType("int");

                    b.Property<string>("Dias")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime?>("FechaFin")
                        .HasColumnType("datetime2");

                    b.Property<DateTime?>("FechaInicio")
                        .HasColumnType("datetime2");

                    b.Property<DateTime>("FechaRegistro")
                        .HasColumnType("datetime2");

                    b.Property<string>("Horario")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PeriodoAcademico")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)");

                    b.Property<int>("ProfesorId")
                        .HasColumnType("int");

                    b.HasKey("SeccionId");

                    b.HasIndex("CursoId", "Codigo", "PeriodoAcademico")
                        .IsUnique();

                    b.ToTable("Secciones", null, t =>
                        {
                            t.HasCheckConstraint("CK_Seccion_CapacidadMaxima", "[CapacidadMaxima] > 0");
                        });
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Carrera", b =>
                {
                    b.HasOne("Universidad.Domain.Entities.Facultad", "Facultad")
                        .WithMany("Carreras")
                        .HasForeignKey("FacultadId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Facultad");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Curso", b =>
                {
                    b.HasOne("Universidad.Domain.Entities.Carrera", "Carrera")
                        .WithMany("Cursos")
                        .HasForeignKey("CarreraId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Carrera");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Prerrequisito", b =>
                {
                    b.HasOne("Universidad.Domain.Entities.Curso", "Curso")
                        .WithMany("Prerrequisitos")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("Universidad.Domain.Entities.Curso", "CursoRequerido")
                        .WithMany()
                        .HasForeignKey("CursoReqId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");

                    b.Navigation("CursoRequerido");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Seccion", b =>
                {
                    b.HasOne("Universidad.Domain.Entities.Curso", "Curso")
                        .WithMany("Secciones")
                        .HasForeignKey("CursoId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.Navigation("Curso");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Carrera", b =>
                {
                    b.Navigation("Cursos");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Curso", b =>
                {
                    b.Navigation("Prerrequisitos");

                    b.Navigation("Secciones");
                });

            modelBuilder.Entity("Universidad.Domain.Entities.Facultad", b =>
                {
                    b.Navigation("Carreras");
                });
#pragma warning restore 612, 618
        }
    }
}
